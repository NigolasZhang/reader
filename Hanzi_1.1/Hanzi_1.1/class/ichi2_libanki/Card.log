null/****************************************************************************************
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }


    public HashMap<String, String> _getQA() {
        return _getQA(false);
    }


    public HashMap<String, String> _getQA(boolean reload) {
        return _getQA(reload, false);
    }


    /**
     * 返回// 最终d中保存三个元素，它是个字典：具体内容：
     * "q"->"今天星期几啊"
     * "a"->"今天星期几呀\n\n<hr id=answer>\n\n星期三吧"
     * "id"->"41276839263" */
    public HashMap<String, String> _getQA(boolean reload, boolean browser) {
        // private HashMap<String, String> mQA; mQA 应该是反应问题和答案的
        if (mQA == null || reload) {
            // 获得当前卡片用到的笔记
            Note f = note(reload);
            // 获取当前卡片用到的笔记类型
            JSONObject m = model();
            // 获取当前卡片用到的卡片模板
            JSONObject t = template();
            Object[] data;
            try {
                // @param data is [cid, nid, mid, did, ord, tags, flds] 注意，这里的ord是笔记类型中的卡片模板的索引号，
                data = new Object[] { mId, f.getId(), m.getLong("id"), mODid != 0l ? mODid : mDid, mOrd,
                        f.stringTags(), f.joinedFields() };
            } catch (JSONException e) {
                throw new RuntimeException(e);
            }

            if (browser) {
                try {
                    String bqfmt = t.getString("bqfmt");
                    String bafmt = t.getString("bafmt");
                    mQA = mCol._renderQA(data, bqfmt, bafmt);
                } catch (JSONException e) {
                    throw new RuntimeException(e);
                }
            } else {
                /**
                 * 返回// 最终d中保存三个元素，它是个字典：具体内容：
                 * "q"->"今天星期几啊"
                 * "a"->"今天星期几呀\n\n<hr id=answer>\n\n星期三吧"
                 * "id"->"41276839263" */
                mQA = mCol._renderQA(data);
            }
        }
        return mQA;
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }

    // 设置开始时间；
    public void setTimerStarted(double timeStarted){ mTimerStarted = timeStarted; }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }


    public Card clone() {
        try {
            return (Card)super.clone();
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
    }


    // A list of class members to skip in the toString() representation
    public static final Set<String> SKIP_PRINT = new HashSet<String>(Arrays.asList("SKIP_PRINT", "$assertionsDisabled", "TYPE_LRN",
            "TYPE_NEW", "TYPE_REV", "mNote", "mQA", "mCol", "mTimerStarted", "mTimerStopped"));

    public String toString() {
        List<String> members = new ArrayList<String>();
        for (Field f : this.getClass().getDeclaredFields()) {
            try {
                // skip non-useful elements
                if (SKIP_PRINT.contains(f.getName())) {
                    continue;
                }
                members.add(String.format("'%s': %s", f.getName(), f.get(this)));
            } catch (IllegalAccessException e) {
                members.add(String.format("'%s': %s", f.getName(), "N/A"));
            } catch (IllegalArgumentException e) {
                members.add(String.format("'%s': %s", f.getName(), "N/A"));
            }
        }
        return TextUtils.join(",  ", members);
    }
}
