null/****************************************************************************************
 * Copyright (c) 2009 Daniel Sv√§rd <daniel.svard@gmail.com>                             *
 * Copyright (c) 2009 Edu Zamora <edu.zasu@gmail.com>                                   *
 * Copyright (c) 2011 Norbert Nagold <norbert.nagold@gmail.com>                         *
 * Copyright (c) 2012 Kostas Spyropoulos <inigo.aldana@gmail.com>                       *
 *                                                                                      *
 * This program is free software; you can redistribute it and/or modify it under        *
 * the terms of the GNU General Public License as published by the Free Software        *
 * Foundation; either version 3 of the License, or (at your option) any later           *
 * version.                                                                             *
 *                                                                                      *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY      *
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A      *
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.             *
 *                                                                                      *
 * You should have received a copy of the GNU General Public License along with         *
 * this program.  If not, see <http://www.gnu.org/licenses/>.                           *
 ****************************************************************************************/

package com.ichi2.libanki;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.res.Resources;
import android.net.Uri;
import android.text.Html;

import android.view.View;
import android.widget.FrameLayout;
import android.widget.LinearLayout;

import com.ichi2.anki.AnkiDb;
import com.ichi2.anki.AnkiDroidApp;
import com.ichi2.anki.AnkiFont;
import com.ichi2.anki.CollectionHelper;
import com.ichi2.anki.R;
import com.ichi2.utils.LanguageUtil;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.nio.channels.FileChannel;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Date;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.Deflater;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import timber.log.Timber;

/**
 * TODO comments
 */
public class Utils {
    enum SqlCommandType { SQL_INS, SQL_UPD, SQL_DEL };

    // Used to format doubles with English's decimal separator system
    public static final Locale ENGLISH_LOCALE = new Locale("en_US");

    public static final int CHUNK_SIZE = 32768;

    private static final int DAYS_BEFORE_1970 = 719163;

    private static NumberFormat mCurrentNumberFormat;
    private static NumberFormat mCurrentPercentageFormat;

    private static TreeSet<Long> sIdTree;
    private static long sIdTime;

    // These are doubles on purpose because we want a rounded, not integer result later.
    private static final double TIME_MINUTE = 60.0;  // seconds
    private static final double TIME_HOUR = 60 * TIME_MINUTE;
    private static final double TIME_DAY = 24 * TIME_HOUR;
    // How long is a year? This is a tropical year, according to NIST.
    // http://www.physics.nist.gov/Pubs/SP811/appenB9.html
    private static final double TIME_YEAR = 31556930.0;  // seconds
    // Pretty much everybody agrees that one year is twelve months
    private static final double TIME_MONTH = TIME_YEAR / 12.0;


    // List of all extensions we accept as font files.
    private static final String[] FONT_FILE_EXTENSIONS = new String[] {".ttf",".ttc",".otf"};

    /* Prevent class from being instantiated */
    private Utils() { }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }


    /** Given a list of integers, return a string '(int1,int2,...)'. */
    public static String ids2str(int[] ids) {
        StringBuilder sb = new StringBuilder();
        sb.append("(");
        if (ids != null) {
            String s = Arrays.toString(ids);
            sb.append(s.substring(1, s.length() - 1));
        }
        sb.append(")");
        return sb.toString();
    }


    /** Given a list of integers, return a string '(int1,int2,...)'. */
    public static String ids2str(long[] ids) {
        StringBuilder sb = new StringBuilder();
        sb.append("(");
        if (ids != null) {
            String s = Arrays.toString(ids);
            sb.append(s.substring(1, s.length() - 1));
        }
        sb.append(")");
        return sb.toString();
    }

    /** Given a list of integers, return a string '(int1,int2,...)'. */
    public static String ids2str(Long[] ids) {
        StringBuilder sb = new StringBuilder();
        sb.append("(");
        if (ids != null) {
            String s = Arrays.toString(ids);
            sb.append(s.substring(1, s.length() - 1));
        }
        sb.append(")");
        return sb.toString();
    }

    /** Given a list of integers, return a string '(int1,int2,...)'. */
    public static <T> String ids2str(List<T> ids) {
        StringBuilder sb = new StringBuilder(512);
        sb.append("(");
        boolean isNotFirst = false;
        for (T id : ids) {
            if (isNotFirst) {
                sb.append(", ");
            } else {
                isNotFirst = true;
            }
            sb.append(id);
        }
        sb.append(")");
        return sb.toString();
    }


    /** Given a list of integers, return a string '(int1,int2,...)'. */
    public static String ids2str(JSONArray ids) {
        StringBuilder str = new StringBuilder(512);
        str.append("(");
        if (ids != null) {
            int len = ids.length();
            for (int i = 0; i < len; i++) {
                try {
                    if (i == (len - 1)) {
                        str.append(ids.get(i));
                    } else {
                        str.append(ids.get(i)).append(",");
                    }
                } catch (JSONException e) {
                    Timber.e(e, "ids2str :: JSONException");
                }
            }
        }
        str.append(")");
        return str.toString();
    }


    /** LIBANKI: not in libanki */
    public static long[] arrayList2array(List<Long> list) {
        long[] ar = new long[list.size()];
        int i = 0;
        for (long l : list) {
            ar[i++] = l;
        }
        return ar;
    }

    public static Long[] list2ObjectArray(List<Long> list) {
        return list.toArray(new Long[list.size()]);
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }


    // used in ankiweb
    public static String base62(int num, String extra) {
        String table = ALL_CHARACTERS + extra;
        int len = table.length();
        String buf = "";
        int mod = 0;
        while (num != 0) {
            mod = num % len;
            buf = buf + table.substring(mod, mod + 1);
            num = num / len;
        }
        return buf;
    }

    // all printable characters minus quotes, backslash and separators
    public static String base91(int num) {
        return base62(num, BASE91_EXTRA_CHARS);
    }


    /** return a base91-encoded 64bit random number */
    public static String guid64() {
        return base91((new Random()).nextInt((int) (Math.pow(2, 61) - 1)));
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }

//    public static JSONArray listToJSONArray(List<Object> list) {
//        JSONArray jsonArray = new JSONArray();
//
//        for (Object o : list) {
//            jsonArray.put(o);
//        }
//
//        return jsonArray;
//    }
//
//
//    public static List<String> jsonArrayToListString(JSONArray jsonArray) throws JSONException {
//        ArrayList<String> list = new ArrayList<String>();
//
//        int len = jsonArray.length();
//        for (int i = 0; i < len; i++) {
//            list.add(jsonArray.getString(i));
//        }
//
//        return list;
//    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }


    public static String fileChecksum(File file) {
        return fileChecksum(file.getAbsolutePath());
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }


//    /**
//     * MD5 sum of file.
//     * Equivalent to checksum(open(os.path.join(mdir, file), "rb").read()))
//     *
//     * @param path The full path to the file
//     * @return A string of length 32 containing the hexadecimal representation of the MD5 checksum of the contents
//     * of the file
//     */
//    public static String fileChecksum(String path) {
//        byte[] bytes = null;
//        try {
//            File file = new File(path);
//            if (file != null && file.isFile()) {
//                bytes = new byte[(int)file.length()];
//                FileInputStream fin = new FileInputStream(file);
//                fin.read(bytes);
//            }
//        } catch (FileNotFoundException e) {
//            Timber.e("Can't find file " + path + " to calculate its checksum");
//        } catch (IOException e) {
//            Timber.e("Can't read file " + path + " to calculate its checksum");
//        }
//        if (bytes == null) {
//            Timber.w("File " + path + " appears to be empty");
//            return "";
//        }
//        MessageDigest md = null;
//        byte[] digest = null;
//        try {
//            md = MessageDigest.getInstance("MD5");
//            digest = md.digest(bytes);
//        } catch (NoSuchAlgorithmException e) {
//            Timber.e("Utils.checksum: No such algorithm. " + e.getMessage());
//            throw new RuntimeException(e);
//        }
//        BigInteger biginteger = new BigInteger(1, digest);
//        String result = biginteger.toString(16);
//        // pad with zeros to length of 32
//        if (result.length() < 32) {
//            result = "00000000000000000000000000000000".substring(0, 32 - result.length()) + result;
//        }
//        return result;
//    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }


    /**
     *  Returns the effective date of the present moment.
     *  If the time is prior the cut-off time (9:00am by default as of 11/02/10) return yesterday,
     *  otherwise today
     *  Note that the Date class is java.sql.Date whose constructor sets hours, minutes etc to zero
     *
     * @param utcOffset The UTC offset in seconds we are going to use to determine today or yesterday.
     * @return The date (with time set to 00:00:00) that corresponds to today in Anki terms
     */
    public static Date genToday(double utcOffset) {
        // The result is not adjusted for timezone anymore, following libanki model
        // Timezone adjustment happens explicitly in Deck.updateCutoff(), but not in Deck.checkDailyStats()
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        df.setTimeZone(TimeZone.getTimeZone("GMT"));
        Calendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT"));
        cal.setTimeInMillis(System.currentTimeMillis() - (long) utcOffset * 1000l);
        return Date.valueOf(df.format(cal.getTime()));
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }


    // Use DateUtil.formatElapsedTime((long) value) instead of doubleToTime.
    // public static String doubleToTime(double value) { ...}
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
    public static long[] toPrimitive(Collection<Long> array) {
        if (array == null) {
            return null;
        }
        long[] results = new long[array.size()];
        int i = 0;
        for (Long item : array) {
            results[i++] = item;
        }
        return results;
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }

    /**
     * Like org.json.JSONArray except that it doesn't escape forward slashes
     * The necessity for this method is due to python's 2.7 json.dumps() function that doesn't escape chracter '/'.
     * The org.json.JSONArray parser accepts both escaped and unescaped forward slashes, so we only need to worry for
     * our output, when we write to the database or syncing.
     *
     * @param json a json object to serialize
     * @return the json serialization of the object
     * @see org.json.JSONArray#toString()
     */
    public static String jsonToString(JSONArray json) {
        return json.toString().replaceAll("\\\\/", "/");
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
}
