null/****************************************************************************************
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }


    public List<Long> findCards(String query, boolean _order) {
        return _findCards(query, _order);
    }


    private List<Long> _findCards(String query, Object _order) {
        String[] tokens = _tokenize(query);
        Pair<String, String[]> res1 = _where(tokens);
        String preds = res1.first;
        String[] args = res1.second;
        List<Long> res = new ArrayList<Long>();
        if (preds == null) {
            return res;
        }
        Pair<String, Boolean> res2 = _order instanceof Boolean ? _order((Boolean) _order) : _order((String) _order);
        String order = res2.first;
        boolean rev = res2.second;
        String sql = _query(preds, order);
        Cursor cur = null;
        try {
            cur = mCol.getDb().getDatabase().rawQuery(sql, args);
            while (cur.moveToNext()) {
                res.add(cur.getLong(0));
            }
        } catch (SQLException e) {
            // invalid grouping
            return new ArrayList<Long>();
        } finally {
            if (cur != null) {
                cur.close();
            }
        }
        if (rev) {
            Collections.reverse(res);
        }
        return res;
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
        }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
        }
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
    
    private Pair<String, Boolean> _order(Boolean order) {
        if (!order) {
            return new Pair<String, Boolean>("", false);
        }
        try {
            // use deck default
            String type = mCol.getConf().getString("sortType");
            String sort = null;
            if (type.startsWith("note")) {
                if (type.startsWith("noteCrt")) {
                    sort = "n.id, c.ord";
                } else if (type.startsWith("noteMod")) {
                    sort = "n.mod, c.ord";
                } else if (type.startsWith("noteFld")) {
                    sort = "n.sfld COLLATE NOCASE, c.ord";
                }
            } else if (type.startsWith("card")) {
                if (type.startsWith("cardMod")) {
                    sort = "c.mod";
                } else if (type.startsWith("cardReps")) {
                    sort = "c.reps";
                } else if (type.startsWith("cardDue")) {
                    sort = "c.type, c.due";
                } else if (type.startsWith("cardEase")) {
                    sort = "c.factor";
                } else if (type.startsWith("cardLapses")) {
                    sort = "c.lapses";
                } else if (type.startsWith("cardIvl")) {
                    sort = "c.ivl";
                }
            }
            if (sort == null) {
            	// deck has invalid sort order; revert to noteCrt
            	sort = "n.id, c.ord";
            }
            boolean sortBackwards = mCol.getConf().getBoolean("sortBackwards");
            return new Pair<String, Boolean>(" ORDER BY " + sort, sortBackwards);
        } catch (JSONException e) {
            throw new RuntimeException(e);
        }
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }


    public static int findReplace(Collection col, List<Long> nids, String src, String dst, boolean isRegex,
            String field, boolean fold) {
        Map<Long, Integer> mmap = new HashMap<Long, Integer>();
        if (field != null) {
            try {
                for (JSONObject m : col.getModels().all()) {
                    JSONArray flds = m.getJSONArray("flds");
                    for (int fi = 0; fi < flds.length(); ++fi) {
                        JSONObject f = flds.getJSONObject(fi);
                        if (f.getString("name").equals(field)) {
                            mmap.put(m.getLong("id"), f.getInt("ord"));
                        }
                    }
                }
            } catch (JSONException e) {
                throw new RuntimeException(e);
            }
            if (mmap.isEmpty()) {
                return 0;
            }
        }
        // find and gather replacements
        if (!isRegex) {
            src = Pattern.quote(src);
        }
        if (fold) {
            src = "(?i)" + src;
        }
        Pattern regex = Pattern.compile(src);

        ArrayList<Object[]> d = new ArrayList<Object[]>();
        String snids = Utils.ids2str(nids);
        nids = new ArrayList<Long>();
        Cursor cur = null;
        try {
            cur = col.getDb().getDatabase().rawQuery(
                    "select id, mid, flds from notes where id in " + snids, null);
            while (cur.moveToNext()) {
                String flds = cur.getString(2);
                String origFlds = flds;
                // does it match?
                String[] sflds = Utils.splitFields(flds);
                if (field != null) {
                    long mid = cur.getLong(1);
                    if (!mmap.containsKey(mid)) {
                        // note doesn't have that field
                        continue;
                    }
                    int ord = mmap.get(mid);
                    sflds[ord] = regex.matcher(sflds[ord]).replaceAll(dst);
                } else {
                    for (int i = 0; i < sflds.length; ++i) {
                        sflds[i] = regex.matcher(sflds[i]).replaceAll(dst);
                    }
                }
                flds = Utils.joinFields(sflds);
                if (!flds.equals(origFlds)) {
                    long nid = cur.getLong(0);
                    nids.add(nid);
                    d.add(new Object[] { flds, Utils.intNow(), col.usn(), nid }); // order based on query below
                }
            }
        } finally {
            if (cur != null) {
                cur.close();
            }
        }
        if (d.isEmpty()) {
            return 0;
        }
        // replace
        col.getDb().executeMany("update notes set flds=?,mod=?,usn=? where id=?", d);
        long[] pnids = Utils.toPrimitive(nids);
        col.updateFieldCache(pnids);
        col.genCards(pnids);
        return d.size();
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }

    /*
     * ***********************************************************
     * The methods below are not in LibAnki.
     * ***********************************************************
     */

    public ArrayList<HashMap<String, String>> findCardsForCardBrowser(String query, boolean _order,
            HashMap<String, String> deckNames) {
        return _findCardsForCardBrowser(query, _order, deckNames);
    }


    public ArrayList<HashMap<String, String>> findCardsForCardBrowser(String query, String _order,
            HashMap<String, String> deckNames) {
        return _findCardsForCardBrowser(query, _order, deckNames);
    }


    /** Return a list of card ids for QUERY */
    private ArrayList<HashMap<String, String>> _findCardsForCardBrowser(String query, Object _order,
            HashMap<String, String> deckNames) {
        String[] tokens = _tokenize(query);
        Pair<String, String[]> res1 = _where(tokens);
        String preds = res1.first;
        String[] args = res1.second;
        ArrayList<HashMap<String, String>> res = new ArrayList<HashMap<String, String>>();
        if (preds == null) {
            return res;
        }
        Pair<String, Boolean> res2 = _order instanceof Boolean ? _order((Boolean) _order) : _order((String) _order);
        String order = res2.first;
        boolean rev = res2.second;
        String sql = _queryForCardBrowser(preds, order);
        Cursor cur = null;
        try {
            cur = mCol.getDb().getDatabase().rawQuery(sql, args);
            DeckTask task = DeckTask.getInstance();
            while (cur.moveToNext()) {
                // cancel if the launching task was cancelled. 
                if (task.isCancelled()){
                    Timber.i("_findCardsForCardBrowser() cancelled...");
                    return null;
                }                
                HashMap<String, String> map = new HashMap<String, String>();
                map.put("id", cur.getString(0));
                map.put("sfld", cur.getString(1));
                map.put("deck", deckNames.get(cur.getString(2)));
                int queue = cur.getInt(3);
                String tags = cur.getString(4);
                map.put("flags", Integer.toString((queue == -1 ? 1 : 0) + (tags.matches(".*[Mm]arked.*") ? 2 : 0)));
                map.put("tags", tags);
                res.add(map);
                // add placeholder for question and answer
                map.put("question", "");
                map.put("answer", "");
            }
        } catch (SQLException e) {
            // invalid grouping
            Timber.e("Invalid grouping, sql: " + sql);
            return new ArrayList<HashMap<String, String>>();
        } finally {
            if (cur != null) {
                cur.close();
            }
        }
        if (rev) {
            Collections.reverse(res);
        }
        return res;
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
}
