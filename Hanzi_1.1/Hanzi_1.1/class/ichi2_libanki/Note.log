null/****************************************************************************************
 * Copyright (c) 2011 Norbert Nagold <norbert.nagold@gmail.com>                         *
 * Copyright (c) 2014 Houssam Salem <houssam.salem.au@gmail.com>                        *
 *                                                                                      *
 * This program is free software; you can redistribute it and/or modify it under        *
 * the terms of the GNU General Public License as published by the Free Software        *
 * Foundation; either version 3 of the License, or (at your option) any later           *
 * version.                                                                             *
 *                                                                                      *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY      *
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A      *
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.             *
 *                                                                                      *
 * You should have received a copy of the GNU General Public License along with         *
 * this program.  If not, see <http://www.gnu.org/licenses/>.                           *
 ****************************************************************************************/

package com.ichi2.libanki;

import android.database.Cursor;

import android.util.Pair;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;


public class Note implements Cloneable {

    private Collection mCol;

    // note表中的id字段；
    private long mId;
    // 一个64位数的随机字符串
    private String mGuId;
    // 这个笔记对应的--笔记类型；它包含字段信息，但不同于卡片模板；
    private JSONObject mModel;
    // 它对应mModel的id；
    private long mMid;
    // 标签集合，
    private List<String> mTags;
    // 字段，此笔记的字段内容，
    private String[] mFields;
    // 来自note表中的字段flags,默认是0；
    private int mFlags;
    // 来自note表中的字段data,默认这个值是空字符串“”
    private String mData;
    /** "Mapping of field name -> (ord, field).
     *  比如： 字段有“正面”和“背面”，正面是第一个字段，背面是第二个字段；
     *  则返回的map集合的第一个元素就是下面的样式：
     *  { “正面” {0， {name:“正面”， sticky:false, rtl:false, ord:0, font:"Arial", size:20}}}
     *  { “背面” {1， {name:“背面”， sticky:false, rtl:false, ord:1, font:"Arial", size:20}}}
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }

    // 笔记克隆；这个方法将返回Object对象的一个拷贝。
    // 要说明的有两点：一是拷贝对象返回的是一个新对象，而不是一个引用。
    // 二是拷贝对象与用 new操作符返回的新对象的区别就是这个拷贝已经包含了一些原来对象的信息，
    // 而不是对象的初始信息。因此，我们定义的类也要遵循oc的copy协议；
    public Note clone() {
        try {
            return (Note)super.clone();
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
    }
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
==<>==<>==<>==<>==<>==
    }
}
